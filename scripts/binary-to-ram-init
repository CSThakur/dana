#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

sub usage {
    print << "END"
Usage: binary-to-ram-init [OPTIONS]
Convert a FANN binary configuration to a Verilog init structure

Required Options:
  -i, --input                input FANN configuration
  -w, --block-width          the width of one block in bytes
END
}

my ($config_input,
    $block_width);
GetOptions ( "i|input=s" => \$config_input,
             "w|block-width=i" => \$block_width)
    or usage() and die "Bad options";

usage() and die "Unspecified required options" if
    not $config_input or not $block_width;

my $width_in_bits = $block_width * 8;

# Open the configuration file and read all of it into a buffer.
my $buffer = "";
open FILE, "<$config_input" or die "Unable to open <$config_input";
read FILE, $buffer, -s FILE, 0;
close FILE;

# Go through the file byte by byte and dump it out into a Verilog
# initialization format
my $count = 0;
my $i = 0;
my $little_endian = "";
print "// Initial RAM state for file:\n";
print "//   $config_input\n";
print "initial begin\n";
foreach (split(//, $buffer)) {
    $little_endian = sprintf("%02x%s", ord($_), $little_endian);
    # printf("%02x ", ord($_));
    if ($count == $block_width - 1) {
        print "  ram[$i] = $width_in_bits\'h$little_endian;\n";
        $little_endian = "";
        $count = 0;
        $i++;
        next;
    }
    $count++;
}
print "end\n";
