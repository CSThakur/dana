#!/usr/bin/python3

import numpy
import math
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import argparse
import re

def parse_arguments():
    parser = argparse.ArgumentParser(
        description='Generate a video of how a FANN network evolves')
    parser.add_argument(
        '-t', '--train-file', dest='file_train', type=str, required=True,
        help='The FANN training file')
    parser.add_argument(
        '-l', '--log-file', dest='file_log', type=str, required=True,
        help='The log of outputs generated by fann-train or fann-batch')
    parser.add_argument(
        '-s', '--save-video', dest='file_save', type=str,
        help='The file to save the video in')
    return parser.parse_args()

def file_len(filename):
    with open(filename) as f:
        for i, l in enumerate(f):
            pass
    return i+1

def main():
    args = parse_arguments()
    re_num = re.compile('[-.e\d]+')
    re_header = re.compile('(\d+) (\d+) (\d+)')

    with open(args.file_train, 'r') as f:
        line = f.readline()
        m = re_header.match(line)
        num_items = int(m.group(1))
        num_inputs = int(m.group(2))
        num_outputs = int(m.group(3))
        inputs = numpy.zeros((num_items, num_inputs))
        outputs_correct = numpy.zeros((num_items, num_outputs))
        for i in range(num_items):
            line = f.readline()
            m = re_num.findall(line)
            for x in range(len(m)):
                inputs[i][x] = float(m[x])
            line = f.readline()
            m = re_num.findall(line)
            for x in range(len(m)):
                outputs_correct[i][x] = float(m[x])

    num_batches = int(file_len(args.file_log) / num_items / num_outputs)
    outputs = numpy.zeros((num_batches, num_items, num_outputs))

    with open(args.file_log, 'r') as f:
        for batch in range(num_batches):
            for item in range(num_items):
                line = f.readline()
                m = re_num.findall(line)
                for output in range(len(m)):
                    outputs[batch][item][output] = float(m[output])

    fig = plt.figure()
    ax = plt.axes(xlim=(-1, 1), ylim=(-1, 1))
    x, y = zip(*sorted(zip(inputs, outputs[0])))
    line_nn, = ax.plot(x, y, '.')
    x, y_correct = zip(*sorted(zip(inputs, outputs_correct)))
    line_orig, = ax.plot(x, y_correct)

    def update(i):
        x, y = zip(*sorted(zip(inputs, outputs[i])))
        line_nn.set_data(x, y)
        return line_nn,

    def init():
        line_nn.set_data([], [])
        return line,

    ani = animation.FuncAnimation(fig, update, init_func=init,
                                  frames=len(outputs), interval=1)
    if (args.file_save is not None):
        ani.save(args.file_save, fps=30, extra_args=['-vcodec', 'libx264'])
    else:
        plt.show()

if __name__ == '__main__':
    main()
