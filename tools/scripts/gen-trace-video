#!/usr/bin/python

import numpy
import math
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import argparse
import re

def parse_arguments():
    parser = argparse.ArgumentParser(
        description='Generate a video of how a FANN network evolves')
    parser.add_argument(
        '-t', '--train-file', dest='file_train', type=str, required=True,
        nargs='+',
        help='The FANN training file')
    parser.add_argument(
        '-l', '--log-file', dest='file_log', type=str, required=True,
        nargs='+',
        help='The log of outputs generated by fann-train or fann-batch')
    parser.add_argument(
        '-c', '--corect-file', dest='file_correct', type=str, required=True,
        help='The correct inputs and outputs generated for the test')
    parser.add_argument(
        '-s', '--save-video', dest='file_save', type=str,
        help='The file to save the video in')
    return parser.parse_args()

def file_len(filename):
    with open(filename) as f:
        for i, l in enumerate(f):
            pass
    return i+1

def main():
    args = parse_arguments()
    re_num = re.compile('[-.e\d]+')
    re_header = re.compile('(\d+) (\d+) (\d+)')

    num_trains = len(args.file_train)
    num_batches = numpy.zeros(num_trains, dtype=numpy.int)
    num_items = numpy.zeros(num_trains, dtype=numpy.int)  
    list_plot_color = ['g^', 'bs', 'ro']
    
    with open(args.file_correct, 'r') as f:
        line = f.readline()
        m = re_header.match(line)
        num_items_correct = int(m.group(1))
        num_inputs = int(m.group(2))
        num_outputs = int(m.group(3))
        inputs_correct = numpy.zeros((num_items_correct, num_inputs))
        outputs_correct = numpy.zeros((num_items_correct, num_outputs))
        for i in range(num_items_correct):
            line = f.readline()
            m = re_num.findall(line)
            for x in range(len(m)):
                inputs_correct[i][x] = float(m[x])
            line = f.readline()
            m = re_num.findall(line)
            for x in range(len(m)):
                outputs_correct[i][x] = float(m[x])


    inputs = numpy.zeros((num_trains,num_items_correct, num_inputs))
    num_logs = len(args.file_log)

    for train in range(num_trains):
        with open(args.file_train[train], 'r') as f:
            line = f.readline()
            m = re_header.match(line)
            num_items[train] = int(m.group(1))
            num_inputs = int(m.group(2))
            num_outputs = int(m.group(3))
               
            for i in range(num_items[train]):
                line = f.readline()
                m = re_num.findall(line)
                for x in range(len(m)):
                    inputs[train][i][x] = float(m[x])
                    line = f.readline()
                    m = re_num.findall(line)
       
        num_batches[train] = int(file_len(args.file_log[train]) / num_items[train] / num_outputs)
 
    outputs = numpy.zeros((num_logs, num_batches.max(), num_items.max(), num_outputs))
    
    for log in range(num_logs):
        with open(args.file_log[log], 'r') as f:
            for batch in range(num_batches[log]):
                for item in range(num_items[log]):
                    line = f.readline()
                    m = re_num.findall(line)
                    for output in range(len(m)):
                        outputs[log][batch][item][output] = float(m[output])

    fig = plt.figure()
    ax = plt.axes(xlim=(-1, 1), ylim=(-1, 1))

    line_nn = [ax.plot(0, 0) for i in range(num_logs)]

    x, y_correct = zip(*sorted(zip(inputs_correct, outputs_correct)))
    line_orig, = ax.plot(x, y_correct)
    line_orig.set_label('Correct')

    for log in range(num_logs):
        x, y = zip(*sorted(zip(inputs[log], outputs[log][0])))
        line_nn[log], = ax.plot(x, y,list_plot_color[log])
        line_nn[log].set_label(args.file_log[log])
    plt.legend(loc='best')

    def update(i):
        for log in range(num_logs):
            x, y = zip(*sorted(zip(inputs[log],outputs[log][i])))
            line_nn[log].set_data(x, y)
        plt.title("Epoch {0}".format(i))
        return line_nn,

    def init():
        for log in range(num_logs):
            line_nn[log].set_data([], [])
        return line_nn,

    ani = animation.FuncAnimation(fig, update, init_func=init,
                                  frames=len(outputs[0]), interval=1)
    if (args.file_save is not None):
        ani.save(args.file_save, fps=30)
    else:
        plt.show()

if __name__ == '__main__':
    main()
