diff --git a/fsim/fpga_mem_gen b/fsim/fpga_mem_gen
index 2c9e249..2890a04 100755
--- a/fsim/fpga_mem_gen
+++ b/fsim/fpga_mem_gen
@@ -5,6 +5,8 @@
 
 import sys
 import math
+import re
+import argparse
 
 use_latches = False
 
@@ -182,13 +184,42 @@ def gen_mem(name, width, depth, ports, mask_gran):
                             '\n  '.join(sequential),
                             '\n  '.join(combinational))
 
-
+def add_verilog(verilog_file, include_paths):
+  found_file = False
+  for inc_dir in include_paths:
+    try:
+      open_verilog_file = open(inc_dir + '/' + verilog_file)
+    except IOError:
+      continue
+    else:
+      re_include = re.compile("^`include \"(.+)\" ?$")
+      for line in open_verilog_file:
+        match = re_include.match(line)
+        if match:
+          add_verilog(match.group(1), include_paths)
+          continue
+        sys.stdout.write(line)
+      return
+  raise IOError('Unable to find file ' + verilog_file)
 
 def main():
-  if len(sys.argv) < 2:
-    sys.exit('Please give a .conf file as input')
-  for line in open(sys.argv[1]):
-    print(gen_mem(*parse_line(line)))
+  parser = argparse.ArgumentParser(description='Add SRAMs to Chisel-generated Verilog backend using Chisel conf file and specific Verilog files.')
+  parser.add_argument('-c', '--configuration', type=open,
+                      help='Chisel configuration file to parse')
+  parser.add_argument('-I', '--include', help='Append directory to include directory. This is used to dereference any specified Verilog files (-v) or their \"`include\" Verilog directives. The current directory is searched by default.',
+                      action='append', default=['.'])
+  parser.add_argument('-v', '--verilog_file',
+                      help='Verilog file to append to the output of the Chisel Verilog backend.',
+                      action='append')
+  args = parser.parse_args()
+
+  if (args.configuration):
+    for line in args.configuration:
+      print(gen_mem(*parse_line(line)))
+
+  if (args.verilog_file):
+    for verilog_file in args.verilog_file:
+      add_verilog(verilog_file, args.include)
 
 
 if __name__ == '__main__':
